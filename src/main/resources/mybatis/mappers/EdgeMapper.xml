<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.analyzer.core.db.mapper.EdgeMapper">

    <!-- Result Map -->
    <resultMap id="EdgeResultMap" type="GraphEdge">
        <id property="id" column="id"/>
        <result property="sourceId" column="source_id"/>
        <result property="targetId" column="target_id"/>
        <result property="edgeType" column="edge_type"/>
        <result property="metadataJson" column="metadata_json"/>
        <result property="createdAt" column="created_at"/>
    </resultMap>

    <!-- Insert Edge -->
    <insert id="insertEdge" parameterType="GraphEdge" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO edges (source_id, target_id, edge_type, metadata_json, created_at)
        VALUES (#{sourceId}, #{targetId}, #{edgeType}, #{metadataJson}, CURRENT_TIMESTAMP)
    </insert>

    <!-- Find by ID -->
    <select id="findById" parameterType="long" resultMap="EdgeResultMap">
        SELECT id, source_id, target_id, edge_type, metadata_json, created_at
        FROM edges
        WHERE id = #{id}
    </select>

    <!-- Find by Type -->
    <select id="findByType" parameterType="string" resultMap="EdgeResultMap">
        SELECT id, source_id, target_id, edge_type, metadata_json, created_at
        FROM edges
        WHERE edge_type = #{edgeType}
        ORDER BY created_at DESC
    </select>

    <!-- Find by Source ID -->
    <select id="findBySourceId" parameterType="string" resultMap="EdgeResultMap">
        SELECT id, source_id, target_id, edge_type, metadata_json, created_at
        FROM edges
        WHERE source_id = #{sourceId}
        ORDER BY edge_type, created_at DESC
    </select>

    <!-- Find by Target ID -->
    <select id="findByTargetId" parameterType="string" resultMap="EdgeResultMap">
        SELECT id, source_id, target_id, edge_type, metadata_json, created_at
        FROM edges
        WHERE target_id = #{targetId}
        ORDER BY edge_type, created_at DESC
    </select>

    <!-- Find Specific Edge -->
    <select id="findEdge" resultMap="EdgeResultMap">
        SELECT id, source_id, target_id, edge_type, metadata_json, created_at
        FROM edges
        WHERE source_id = #{sourceId}
          AND target_id = #{targetId}
          AND edge_type = #{edgeType}
    </select>

    <!-- Find All -->
    <select id="findAll" resultMap="EdgeResultMap">
        SELECT id, source_id, target_id, edge_type, metadata_json, created_at
        FROM edges
        ORDER BY edge_type, created_at DESC
    </select>

    <!-- Delete Edge -->
    <delete id="deleteEdge" parameterType="long">
        DELETE FROM edges WHERE id = #{id}
    </delete>

    <!-- Delete by Node ID -->
    <delete id="deleteByNodeId" parameterType="string">
        DELETE FROM edges 
        WHERE source_id = #{nodeId} OR target_id = #{nodeId}
    </delete>

    <!-- Delete All -->
    <delete id="deleteAll">
        DELETE FROM edges
    </delete>

    <!-- Count Edges -->
    <select id="countEdges" resultType="int">
        SELECT COUNT(*) FROM edges
    </select>

    <!-- Count by Type -->
    <select id="countByType" parameterType="string" resultType="int">
        SELECT COUNT(*) FROM edges WHERE edge_type = #{edgeType}
    </select>

</mapper>
